/**
 * Ejercicio: Range Extraction (Extraído de la plataforma "codewars.com")
 * 
 * Formato para expresar una lista ordenada de enteros:
 * - Números individuales se escriben tal cual.
 * - Rangos de enteros consecutivos se representan con un guion ("-"),
 *   indicando el número inicial y el final del rango.
 * - Un rango solo es válido si abarca al menos 3 números consecutivos.
 *   En caso contrario, los números se listan individualmente separados por comas.
 * 
 * Ejemplo:
 * Entrada: [12, 13, 15, 16, 17]
 * Salida: "12,13,15-17"
 * 
 * Entrada: [1, 2, 3, 5, 6, 7, 8, 10]
 * Salida: "1-3,5-8,10"
 */
class Solution {
		public static String rangeExtraction(int[] arr) {
      StringBuilder resultado = new StringBuilder();
      int count =0;
//Recorro todos los elementos del array
      for(int i =0; i<arr.length; i++){
        resultado.append(arr[i]);
        count = 0;
//Me aseguro de no tratar de acceder y comprobar un elemento que no cumpla con las condiciones necesarias, en este caso, que el siguiente elemento en lista sea igual al valor que debería ir en orden numérico
        if(i+1<arr.length && arr[i]+1 == arr[i+1]){
          while(i+1<arr.length && arr[i]+1 == arr[i+1]){
            count++;
            i++;  
          }
//deben existir al menos 3 elementos, por lo tanto, uso un contador para asegurarme de que existan dichos 3 elementos, de lo contrario simplemente añado una coma aunque los números sean consecutivos
            if(count>=2){
              resultado.append("-"+arr[i]);
          }
          else{        
              resultado.append(","+arr[i]);
          }
        }
//Siempre que no nos encontremos en el último elemento de la lista se añade una coma al final
      if(i+1<arr.length){
        resultado.append(",");
      }
      }      
    		return resultado.toString();
    }
